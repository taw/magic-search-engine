#!/usr/bin/env ruby

require_relative "../search-engine/lib/card_database"

class ExportDecksData
  def initialize
    @db = CardDatabase.load
    @uuids_path = Pathname("#{__dir__}/../index/uuids.txt")
    load_uuids
  end

  def load_uuids
    @uuids = {}
    @uuids_path.each_line do |line|
      s, n, u, _ = line.chomp.split("\t")
      @uuids[s] ||= {}
      raise if @uuids[s][n]
      @uuids[s][n] = u
    end
  end

  def uuid_for(set_code, number)
    @uuids.fetch(set_code).fetch(number)
  end

  def export_card(n, c)
    {
      name: c.name,
      set_code: c.set_code,
      number: c.number,
      foil: c.foil,
      count: n,
      multiverseid: c.main_front.multiverseid,
      mtgjson_uuid: uuid_for(c.set_code, c.number),
    }.compact
  end

  def call(output_path)
    code_map = {'Intro Pack'=> "intr", 
      'Advanced Pack'=> "advp",
      'Archenemy Deck'=> "arch",
      'Jumpstart'=> "jmp",
      'Starter Deck'=> "std",
      'Pioneer Challenger Deck'=> "pio",
      'Clash Pack'=> "clsh",
      'Guild Kit'=> "gkt",
      'Event Deck'=> "evn",
      'Premium Deck'=> "prm",
      'Basic Deck'=> "bas",
      'Advanced Deck'=> "advd",
      'Planeswalker Deck'=> "plw",
      'Welcome Deck'=> "wel",
      'Spellslinger Starter Kit'=> "sstk",
      'Challenger Deck'=> "chl",
      'Arena Starter Kit'=> "astk",
      'MTGO Theme Deck'=> "motd",
      'Game Night Deck'=> "gnd",
      'Duel Deck'=> "dd",
      'Brawl Deck'=> "brwl",
      'Duel Of The Planeswalkers Deck'=> "dotp",
      'Planechase Deck'=> "plch",
      'Halfdeck'=> "hdk",
      'Commander Deck'=> "cmr",
      'Theme Deck'=> "thm",
      'World Championship Decks'=> "wch"
    }
    codes = Set[]
    exported_data = []
    @db.decks.each do |deck|
      code = deck.set_code + "-"
      if code_map.key?(deck.type)
        code << code_map[deck.type] << "-"
      end
      code << deck.name.downcase.gsub(/[^a-z]/, '')[0...5]
      code2 = code
      n = 2
      while codes.include?(code2)
        code2 = code + "-" + n.to_s
        n += 1
      end
      codes << code2
      exported_data << {
        name: deck.name,
        type: deck.type,
        code: code2,
        set_code: deck.set_code,
        set_name: deck.set_name,
        release_date: deck.release_date,
        cards: deck.cards.map{|n,c| export_card(n, c) },
        sideboard: deck.sideboard.map{|n,c| export_card(n, c) },
        commander: deck.commander.map{|n,c| export_card(n, c) },
      }
    end
    open(output_path, "w") do |fh|
      fh.puts JSON.pretty_generate(exported_data)
    end
  end
end

output_path = ARGV[0] || "export_decks.json"
ExportDecksData.new.call(output_path)
