#!/usr/bin/env ruby

require "pathname"
require "set"

class String
  def oneline
    gsub(/\s+/, " ")
  end
end

class FormatCompRules
  def call
    @output = []
    @output << "= content_for(:disable_turbolinks) do"
    @output << "  true"
    paras = text_rules.split(/\n{2,}/)

    raise unless paras[0] == "Magic: The Gathering Comprehensive Rules"
    primary_header! paras.shift
    para! paras.shift while paras[0] != "Introduction"
    secondary_header! paras.shift
    para! paras.shift while paras[0] != "Contents"
    secondary_header! paras.shift

    while paras[0] != "1. Game Concepts"
      tos_section! paras.shift
    end

    while paras[0] =~ /\A\d/
      rule! paras.shift
    end

    raise unless paras[0] == "Glossary"
    secondary_header! paras.shift

    while paras[0] != "Credits"
      glossary_entry! paras.shift
    end

    secondary_header! paras.shift
    para! paras.shift while paras[0]

    save!
  end

  ## Output formatting

  def ref(id)
    "section-#{ id.downcase.sub(/\.\z/, "").gsub(/[^a-z0-9]/, "-") }"
  end

  ## duplicates form ApplicationHelper
  def format_mana_symbols(syms)
    syms.gsub(/\{(.*?)\}/) do
      sym  = $&
      mana = $1.gsub("/", "").downcase
      if good_mana_symbols.include?(mana)
        if mana[0] == "h"
          %[<span class="mana mana-half"><span class="mana mana-cost mana-#{mana[1..-1]}"><span class="sr-only">#{sym}</span></span></span>]
        elsif mana == "p" or mana == "chaos" or mana == "pw" or mana == "e"
          # No circle
          %[<span class="mana mana-#{mana}"><span class="sr-only">#{sym}</span></span>]
        else
          %[<span class="mana mana-cost mana-#{mana}"><span class="sr-only">#{sym}</span></span>]
        end
      else
        sym
      end
    end
  end

  def good_mana_symbols
    @good_mana_symbols ||= Set[
      "x", "y", "z",
      "0", "1", "2", "3", "4", "5", "6", "7", "8", "9",
      "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20",
      "w", "u", "b", "r", "g",
      "wu", "wb", "rw", "gw", "ub", "ur", "gu", "br", "bg", "rg",
      "2w", "2u", "2b", "2r", "2g",
      "wp", "up", "bp", "rp", "gp", "p",
      "s", "q", "t", "c", "e",
      "½", "1000000", "100", "∞",
      "chaos", "pw",
      "hw", "hr",
      "wup", "wbp", "rwp", "gwp", "ubp", "urp", "gup", "brp", "bgp", "rgp",
      "tk",
    ]
  end

  def resolve_references(text)
    text.gsub(/\b\d{3}\.\d+[a-z]\b|\b\d{3}\.\d+\b|\b\d{3}\b/) do
      %[<a href="##{ref($&)}">#{$&}</a>]
    end.gsub(/(?:\{.*?\})+/) do
      %[<span class="manacost">] + format_mana_symbols($&) + %[</span>]
    end.gsub(/\[([\+\-\u2212\u2013]?(?:\d+|N|X))\]/) do
      symbol = $1
      csymbol = symbol.downcase.sub(/[-\+\u2212]/, "")
      usymbol = symbol.sub("-", "\u2013").sub("\u2212", "\u2013")
      if usymbol[0] == "+"
        dir = "up"
      elsif usymbol[0] == "\u2013"
        dir = "down"
      else
        dir = "zero"
      end
      %[<i class="mana mana-loyalty mana-loyalty-#{dir} mana-loyalty-#{csymbol}"></i>] +
      %[<span class="sr-only">[#{usymbol}]</span>]
    end
  end

  def glossary_entry!(text)
    term, definition = text.split("\n", 2)
    @output << ".glossary_entry"
    @output << "  .glossary_term #{term}"
    @output << "  .glossary_definition #{resolve_references(definition).oneline}"
  end

  def rule!(rule)
    rule_id, rule_text = rule.split(" ", 2)
    @output << ".rule{id: #{ref(rule_id).inspect}}"
    @output << "  .rule_id #{rule_id}"
    rule_text.split("\n").each do |rule_line|
      @output << "  .rule_text #{resolve_references(rule_line)}"
    end
  end

  def tos_entry!(tos_entry)
    if tos_entry =~ /\A(\d+)/
      section_ref = "section-#{$1}"
    else
      section_ref = "section-#{tos_entry.downcase}"
    end
    @output << "  %li"
    @output << "    %a{href: '##{section_ref}'} #{tos_entry.oneline}"
  end

  def tos_section!(text)
    @output << "%ul.tos_section"
    text.split("\n").each do |tos_entry|
      tos_entry! tos_entry
    end
  end

  def primary_header!(text)
    @output << "%h4 #{text.oneline}"
  end

  def secondary_header!(text)
    @output << "%h3{id: #{ref(text).inspect}} #{text.oneline}"
  end

  def para!(text)
    @output << "%p #{text.oneline}"
  end

  ## Everything else

  def save!
    html_rules_path.write(@output.join("\n")+"\n")
  end

  def html_rules_path
    Pathname(__dir__) + "../frontend/app/views/help/rules.html.haml"
  end

  def text_rules_path
    Pathname(__dir__) + "../data/MagicCompRules.txt"
  end

  def text_rules
    # Assumes converted to UTF-8
    @text_rules ||= html_escape(text_rules_path
                      .read
                      .tr("\r", "")
                    )
  end

  def html_escape(txt)
    raise if txt =~ /[<>]/
    txt.gsub("&", "&amp;")
  end
end

FormatCompRules.new.call
